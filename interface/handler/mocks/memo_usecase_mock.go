// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/memo_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/keigo-saito0602/joumou_karuta_manager/domain/model"
)

// MockMemoUsecase is a mock of MemoUsecase interface.
type MockMemoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMemoUsecaseMockRecorder
}

// MockMemoUsecaseMockRecorder is the mock recorder for MockMemoUsecase.
type MockMemoUsecaseMockRecorder struct {
	mock *MockMemoUsecase
}

// NewMockMemoUsecase creates a new mock instance.
func NewMockMemoUsecase(ctrl *gomock.Controller) *MockMemoUsecase {
	mock := &MockMemoUsecase{ctrl: ctrl}
	mock.recorder = &MockMemoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoUsecase) EXPECT() *MockMemoUsecaseMockRecorder {
	return m.recorder
}

// CreateMemo mocks base method.
func (m *MockMemoUsecase) CreateMemo(ctx context.Context, memo *model.Memo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMemo", ctx, memo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMemo indicates an expected call of CreateMemo.
func (mr *MockMemoUsecaseMockRecorder) CreateMemo(ctx, memo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemo", reflect.TypeOf((*MockMemoUsecase)(nil).CreateMemo), ctx, memo)
}

// DeleteMemo mocks base method.
func (m *MockMemoUsecase) DeleteMemo(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemo indicates an expected call of DeleteMemo.
func (mr *MockMemoUsecaseMockRecorder) DeleteMemo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemo", reflect.TypeOf((*MockMemoUsecase)(nil).DeleteMemo), ctx, id)
}

// GetMemo mocks base method.
func (m *MockMemoUsecase) GetMemo(ctx context.Context, id uint64) (*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemo", ctx, id)
	ret0, _ := ret[0].(*model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemo indicates an expected call of GetMemo.
func (mr *MockMemoUsecaseMockRecorder) GetMemo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemo", reflect.TypeOf((*MockMemoUsecase)(nil).GetMemo), ctx, id)
}

// ListMemos mocks base method.
func (m *MockMemoUsecase) ListMemos(ctx context.Context) ([]model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMemos", ctx)
	ret0, _ := ret[0].([]model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMemos indicates an expected call of ListMemos.
func (mr *MockMemoUsecaseMockRecorder) ListMemos(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMemos", reflect.TypeOf((*MockMemoUsecase)(nil).ListMemos), ctx)
}

// UpdateMemo mocks base method.
func (m *MockMemoUsecase) UpdateMemo(ctx context.Context, memo *model.Memo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemo", ctx, memo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemo indicates an expected call of UpdateMemo.
func (mr *MockMemoUsecaseMockRecorder) UpdateMemo(ctx, memo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemo", reflect.TypeOf((*MockMemoUsecase)(nil).UpdateMemo), ctx, memo)
}
